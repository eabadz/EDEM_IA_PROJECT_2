import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import torch
import torch.nn as nn
import joblib
from PIL import Image

# ======================= CONFIGURACI√ìN =======================
st.set_page_config(page_title="Predicci√≥n de Cr√©dito", page_icon="üí≥", layout="wide")

# ======================= CARGA DE DATOS =======================
@st.cache_data
def load_data():
    return pd.read_csv("dataset.csv")  # Aseg√∫rate de la ruta correcta

df = load_data()
# ======================= CARGA DEL MODELO Y SCALER =======================
@st.cache_resource
def cargar_modelo():
    input_dim = 18  # N√∫mero de caracter√≠sticas despu√©s de OHE
    model = NeuralNetwork(input_dim)
    model.load_state_dict(torch.load("modelo2_credito.pth", map_location=torch.device("cpu")))
    model.eval()
    return model

@st.cache_resource
def cargar_scaler():
    return joblib.load("scaler2.pkl")

# Definir la arquitectura de la red neuronal
class NeuralNetwork(nn.Module):
    def __init__(self, input_size):
        super(NeuralNetwork, self).__init__()
        self.fc1 = nn.Linear(input_size, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 32)
        self.output = nn.Linear(32, 1)
        self.relu = nn.ReLU()
        self.dropout = nn.Dropout(0.3)
        self.sigmoid = nn.Sigmoid()
    
    def forward(self, x):
        x = self.relu(self.fc1(x))
        x = self.dropout(x)
        x = self.relu(self.fc2(x))
        x = self.dropout(x)
        x = self.relu(self.fc3(x))
        x = self.sigmoid(self.output(x))
        # raw_output = self.output(x)
        # print("Salida cruda del modelo:", raw_output.item())  # <-- Agrega esta l√≠nea
        # x = self.sigmoid(raw_output)

        return x

# Cargar el modelo y el escalador una sola vez
model = cargar_modelo()

scaler = cargar_scaler()

# ======================= SIDEBAR Y NAVEGACI√ìN =======================
st.sidebar.title("üìå Men√∫")
pagina = st.sidebar.radio("Ir a:", ["Inicio", "EDA - An√°lisis de Datos", "Predicci√≥n", "Sobre el Modelo", "Login"])

# ======================= P√ÅGINA PRINCIPAL =======================
if pagina == "Inicio":
    col1, col2 = st.columns([2, 1])  

    with col1:
        st.title("üè¶ Predicci√≥n de Aprobaci√≥n de Cr√©dito")
        st.markdown("## üîç Eval√∫a tu cr√©dito en segundos")
        st.write("üí° Con esta app podr√°s:")
        st.write("‚úî Explorar datos hist√≥ricos con gr√°ficos üìä")
        st.write("‚úî Obtener predicciones en tiempo real üîÆ")
        st.write("‚úî Comprender qu√© factores influyen en la aprobaci√≥n üß†")

    with col2:
        imagen = Image.open("credit_image.jpg")
        st.image(imagen, width=250)  

# ======================= P√ÅGINA DE EDA =======================
elif pagina == "EDA - An√°lisis de Datos":
    st.title("üìä Exploraci√≥n de Datos")
    st.subheader("üîç Vista General del Dataset")
    st.write(f"El dataset tiene **{df.shape[0]} filas** y **{df.shape[1]} columnas**.")
    st.dataframe(df.head())

    # Estad√≠sticas descriptivas
    st.subheader("üìå Estad√≠sticas Descriptivas")
    st.write("üìä **Variables num√©ricas:**")
    st.write(df.describe())

    st.write("üî† **Variables categ√≥ricas:**")
    st.write(df.describe(include='object'))

    # Visualizaci√≥n interactiva
    st.subheader("üìä Visualizaci√≥n de Datos")
    tipo_grafico = st.selectbox("Selecciona el tipo de gr√°fico:", 
                                ["Histograma", "Boxplot (Outliers)", "Gr√°fico de barras", "Scatter Plot"])
    variable_x = st.selectbox("Selecciona la variable X:", df.columns)
    variable_y = st.selectbox("Selecciona la variable Y (opcional, solo para scatter):", ["Ninguna"] + list(df.columns))

    fig, ax = plt.subplots(figsize=(8, 4))

    if tipo_grafico == "Histograma":
        sns.histplot(df[variable_x], kde=True, ax=ax)
    elif tipo_grafico == "Boxplot (Outliers)":
        sns.boxplot(x=df[variable_x], ax=ax)
    elif tipo_grafico == "Gr√°fico de barras":
        sns.countplot(data=df, x=variable_x, ax=ax)
        plt.xticks(rotation=45)
    elif tipo_grafico == "Scatter Plot" and variable_y != "Ninguna":
        sns.scatterplot(data=df, x=variable_x, y=variable_y, ax=ax)

    st.pyplot(fig)

    # Heatmap de correlaciones
    st.subheader("üìà Mapa de Calor de Correlaciones")
    numeric_df = df.select_dtypes(include=['number'])
    fig, ax = plt.subplots(figsize=(10,6))
    sns.heatmap(numeric_df.corr(), annot=True, cmap="coolwarm", fmt=".2f", ax=ax)
    st.pyplot(fig)

# ======================= P√ÅGINA DE PREDICCI√ìN =======================
elif pagina == "Predicci√≥n":
    st.title("üîÆ Predicci√≥n de Aprobaci√≥n de Cr√©dito")

    col1, col2 = st.columns(2)

    with col1:
        person_age = st.number_input("Edad", min_value=18, max_value=100, step=1)
        person_income = st.number_input("Ingreso Anual ($)", min_value=1000, max_value=500000, step=1000)
        loan_amnt = st.number_input("Monto del Pr√©stamo ($)", min_value=500, max_value=100000, step=500)
        # loan_int_rate = st.number_input("Tasa de Inter√©s (%)", min_value=0.0, max_value=50.0, step=0.1)

    with col2:
        loan_int_rate = st.number_input("Tasa de Inter√©s (%)", min_value=0.0, max_value=50.0, step=0.1)
        # credit_score = st.number_input("Puntaje de Cr√©dito", min_value=300, max_value=850, step=1)
        cb_hist_length = st.number_input("Historial de Cr√©dito (a√±os)", min_value=0, max_value=50, step=1)
        previous_loan_defaults = st.selectbox("Pr√©stamos impagos previos", ["No", "S√≠"])

    loan_intent = st.selectbox("Motivo del Pr√©stamo", ["EDUCATION", "HOMEIMPROVEMENT", "MEDICAL", "PERSONAL", "VENTURE"])
    person_education = st.selectbox("Nivel de Educaci√≥n", ["High School", "Bachelor", "Master", "Doctorate"])
    person_home_ownership = st.selectbox("Tipo de Vivienda", ["RENT", "OWN", "OTHER"])

    columnas_modelo = [
        'person_age', 'person_income', 'loan_amnt', 'loan_int_rate',
        'cb_person_cred_hist_length',
        'loan_intent_EDUCATION', 'loan_intent_HOMEIMPROVEMENT', 'loan_intent_MEDICAL',
        'loan_intent_PERSONAL', 'loan_intent_VENTURE',
        'person_education_Bachelor', 'person_education_Doctorate',
        'person_education_High School', 'person_education_Master',
        'person_home_ownership_OTHER', 'person_home_ownership_OWN',
        'person_home_ownership_RENT', 'previous_loan_defaults_on_file_Yes'
    ]

    def procesar_datos():
    # Crear DataFrame con los valores ingresados
        df = pd.DataFrame([[person_age, person_income, loan_amnt, loan_int_rate, 
                          cb_hist_length, previous_loan_defaults, 
                          loan_intent, person_education, person_home_ownership]],
                        columns=['person_age', 'person_income', 'loan_amnt', 'loan_int_rate',
                                 'cb_person_cred_hist_length',
                                 'previous_loan_defaults_on_file',
                                 'loan_intent', 'person_education', 'person_home_ownership'])

    # Convertir 'previous_loan_defaults_on_file' a 0/1
        df['previous_loan_defaults_on_file'] = (df['previous_loan_defaults_on_file'] == "S√≠").astype(int)

    # ======================= ONE-HOT ENCODING MANUAL =======================
    # Definir las categor√≠as esperadas en el modelo
        categorias_loan_intent = ["EDUCATION", "HOMEIMPROVEMENT", "MEDICAL", "PERSONAL", "VENTURE"]
        categorias_education = ["High School", "Bachelor", "Master", "Doctorate"]
        categorias_home_ownership = ["RENT", "OWN", "OTHER"]

    # Crear columnas OHE con valores por defecto 0
        for categoria in categorias_loan_intent:
            df[f'loan_intent_{categoria}'] = int(loan_intent == categoria)

        for categoria in categorias_education:
            df[f'person_education_{categoria}'] = int(person_education == categoria)

        for categoria in categorias_home_ownership:
            df[f'person_home_ownership_{categoria}'] = int(person_home_ownership == categoria)

    # ======================= NORMALIZACI√ìN =======================
    # Seleccionar las variables num√©ricas
        numerical_features = ['person_age', 'person_income', 'loan_amnt', 'loan_int_rate', 'cb_person_cred_hist_length']
    
    # Aplicar MinMaxScaler solo a las variables num√©ricas
        df[numerical_features] = scaler.transform(df[numerical_features])

    # ======================= ASEGURAR ORDEN DE COLUMNAS =======================
    # Definir el orden de las columnas seg√∫n el modelo entrenado
        columnas_modelo = [
            'person_age', 'person_income', 'loan_amnt', 'loan_int_rate',
            'cb_person_cred_hist_length', 
            'loan_intent_EDUCATION', 'loan_intent_HOMEIMPROVEMENT', 'loan_intent_MEDICAL',
            'loan_intent_PERSONAL', 'loan_intent_VENTURE',
            'person_education_Bachelor', 'person_education_Doctorate',
            'person_education_High School', 'person_education_Master',
            'person_home_ownership_OTHER', 'person_home_ownership_OWN',
            'person_home_ownership_RENT', 'previous_loan_defaults_on_file'
    ]

    # Asegurar que todas las columnas del modelo est√°n presentes
        for col in columnas_modelo:
            if col not in df.columns:
                df[col] = 0  # Agregar cualquier columna faltante con valor 0

    # Ordenar las columnas en el mismo orden que el modelo
        df = df[columnas_modelo]

    # Convertir a `float` para evitar errores con PyTorch
        df = df.astype(float)

    # Convertir a tensor de PyTorch
        return torch.tensor(df.values, dtype=torch.float32)


    if st.button("üîÆ Predecir"):
        datos_procesados = procesar_datos()  # Procesar los datos ingresados

        # Mostrar las columnas procesadas
        # st.write("Columnas del input en Streamlit:", list(df.columns))
        # st.write("Columnas del modelo entrenado:", columnas_modelo)

        # st.write("üìä **Datos Normalizados para el Modelo:**")
        # st.write(pd.DataFrame(datos_procesados.numpy(), columns=columnas_modelo))  

        # Realizar la predicci√≥n
        prediccion = model(datos_procesados)

        # Resultado de la predicci√≥n
        resultado = "‚úÖ Cr√©dito Aprobado" if prediccion.item() > 0.5 else "‚ùå Cr√©dito Rechazado"
        st.subheader("üìå Resultado de la Predicci√≥n")
        st.write(resultado)
        st.write("üìä Probabilidad Predicha:", prediccion.item())

elif pagina == "Login":


    # Inicializar sesi√≥n si no existe
    if "authenticated" not in st.session_state:
        st.session_state["authenticated"] = False

    # Si no est√° autenticado, mostrar la pantalla de login
    if not st.session_state["authenticated"]:
        st.title("üîë Login")

        username = st.text_input("üìß Username")
        password = st.text_input("üîí Password", type="password")

        if st.button("LOGIN"):
            if username == "admin" and password == "1234":
                st.session_state["authenticated"] = True
                st.rerun()  # üîÑ Recargar la p√°gina para mostrar "database"

            else:
                st.error("‚ùå Invalid username or password.")

    # Si ya est√° autenticado, mostrar la p√°gina "database"
    if st.session_state["authenticated"]:
        st.title("üìÇ Database Page")
        st.write("Bienvenido a la base de datos. Aqu√≠ se mostrar√°n los registros almacenados.")
        
        










